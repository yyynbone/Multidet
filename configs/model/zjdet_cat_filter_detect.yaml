#                 from  n    params  module                                  arguments
#  0                -1       304  models.layers.common_layer.Conv         [1, 8, 6, 2, 2]
#  1                -1      1184  models.layers.common_layer.Conv         [8, 16, 3, 2]
#  2                -1      1248  models.layers.yolo_layer.C3             [16, 16, 1]
#  3                -1      4672  models.layers.common_layer.Conv         [16, 32, 3, 2]
#  4                -1      7424  models.layers.yolo_layer.C3             [32, 32, 2]
#  5                -1     18560  models.layers.common_layer.Conv         [32, 64, 3, 2]
#  6                -1     39552  models.layers.yolo_layer.C3             [64, 64, 3]
#  7                -1     73984  models.layers.common_layer.Conv         [64, 128, 3, 2]
#  8                -1       129  models.head.Classify                    [128, 1]
#  9             input       304  models.layers.common_layer.Conv         [1, 8, 6, 2, 2]
# 10                -1      1184  models.layers.common_layer.Conv         [8, 16, 3, 2]
# 11                -1      1248  models.layers.yolo_layer.C3             [16, 16, 1]
# 12                -1      4672  models.layers.common_layer.Conv         [16, 32, 3, 2]
# 13                -1      7424  models.layers.yolo_layer.C3             [32, 32, 2]
# 14                -1     18560  models.layers.common_layer.Conv         [32, 64, 3, 2]
# 15                -1     39552  models.layers.yolo_layer.C3             [64, 64, 3]
# 16                -1     73984  models.layers.common_layer.Conv         [64, 128, 3, 2]
# 17           [-1, 7]         0  models.layers.common_layer.Concat       [1]
# 18                -1    296448  models.layers.yolo_layer.C3             [256, 256, 1]
# 19                -1    164608  models.layers.yolo_layer.SPPF           [256, 256, 5]
# 20                -1     66048  models.layers.common_layer.Conv         [256, 256, 1, 1]
# 21                -1    296448  models.layers.yolo_layer.C3             [256, 256, 1, False]
# 22                -1     33024  models.layers.common_layer.Conv         [256, 128, 1, 1]
# 23                -1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
# 24       [-1, 15, 6]         0  models.layers.common_layer.Concat       [1]
# 25                -1     90880  models.layers.yolo_layer.C3             [256, 128, 1, False]
# 26                -1      8320  models.layers.common_layer.Conv         [128, 64, 1, 1]
# 27                -1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
# 28       [-1, 13, 4]         0  models.layers.common_layer.Concat       [1]
# 29                -1     22912  models.layers.yolo_layer.C3             [128, 64, 1, False]
# 30      [29, 25, 21]      8118  models.head.Detect                      [[64, 128, 256], 1, [[8, 15, 18, 30, 25, 15], [32, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]]]
#Model Summary: 362layers, 1280791 parameters, 1280791 gradients,image size is 640, 2.5 GFLOPs in cpu
# time (ms)     GFLOPs     params                                    module                       input_size
#      7.01     0.5243        304  models.layers.common_layer.Conv           torch.Size([8, 1, 640, 640])
#      0.30     0.4981       1184  models.layers.common_layer.Conv           torch.Size([8, 8, 320, 320])
#      1.20     0.5505       1248  models.layers.yolo_layer.C3               torch.Size([8, 16, 160, 160])
#      0.10     0.4850       4672  models.layers.common_layer.Conv           torch.Size([8, 16, 160, 160])
#      1.30     0.7864       7424  models.layers.yolo_layer.C3               torch.Size([8, 32, 80, 80])
#      0.20     0.4784      18560  models.layers.common_layer.Conv           torch.Size([8, 32, 80, 80])
#      1.90     1.0289      39552  models.layers.yolo_layer.C3               torch.Size([8, 64, 40, 40])
#      0.15     0.4751      73984  models.layers.common_layer.Conv           torch.Size([8, 64, 40, 40])
#      0.20     0.0008        129  models.head.Classify                      torch.Size([8, 128, 20, 20])
#      0.80     0.5243        304  models.layers.common_layer.Conv           torch.Size([8, 1, 640, 640])
#      0.40     0.4981       1184  models.layers.common_layer.Conv           torch.Size([8, 8, 320, 320])
#      1.20     0.5505       1248  models.layers.yolo_layer.C3               torch.Size([8, 16, 160, 160])
#      0.10     0.4850       4672  models.layers.common_layer.Conv           torch.Size([8, 16, 160, 160])
#      1.40     0.7864       7424  models.layers.yolo_layer.C3               torch.Size([8, 32, 80, 80])
#      0.20     0.4784      18560  models.layers.common_layer.Conv           torch.Size([8, 32, 80, 80])
#      1.90     1.0289      39552  models.layers.yolo_layer.C3               torch.Size([8, 64, 40, 40])
#      0.20     0.4751      73984  models.layers.common_layer.Conv           torch.Size([8, 64, 40, 40])
#      0.10     0.0000          0  models.layers.common_layer.Concat         [torch.Size([8, 128, 20, 20]), torch.Size([8, 128, 20, 20])]
#      1.00     1.9071     296448  models.layers.yolo_layer.C3               torch.Size([8, 256, 20, 20])
#      0.51     1.0584     164608  models.layers.yolo_layer.SPPF             torch.Size([8, 256, 20, 20])
#      0.30     0.4260      66048  models.layers.common_layer.Conv           torch.Size([8, 256, 20, 20])
#      1.00     1.9071     296448  models.layers.yolo_layer.C3               torch.Size([8, 256, 20, 20])
#      0.20     0.2130      33024  models.layers.common_layer.Conv           torch.Size([8, 256, 20, 20])
#      0.10     0.0033          0  torch.nn.modules.upsampling.Upsample      torch.Size([8, 128, 20, 20])
#      0.00     0.0000          0  models.layers.common_layer.Concat         [torch.Size([8, 128, 40, 40]), torch.Size([8, 64, 40, 40]), torch.Size([8, 64, 40, 40])]
#      1.00     2.3462      90880  models.layers.yolo_layer.C3               torch.Size([8, 256, 40, 40])
#      0.20     0.2163       8320  models.layers.common_layer.Conv           torch.Size([8, 128, 40, 40])
#      0.10     0.0066          0  torch.nn.modules.upsampling.Upsample      torch.Size([8, 64, 40, 40])
#      0.10     0.0000          0  models.layers.common_layer.Concat         [torch.Size([8, 64, 80, 80]), torch.Size([8, 32, 80, 80]), torch.Size([8, 32, 80, 80])]
#      1.50     2.3855      22912  models.layers.yolo_layer.C3               torch.Size([8, 128, 80, 80])
#      0.40     0.2064       8118  models.head.Detect                        [torch.Size([8, 64, 80, 80]), torch.Size([8, 128, 40, 40]), torch.Size([8, 256, 20, 20])]
#     25.07    20.3301    1280791  Total
# Parameters
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.25 # layer channel multiple
depth_layer: [C3]
width_layer: [Conv, C3, SPPF, Classify, Detect]
nc: 80
anchors:
  - [8,15, 18,30, 25,15]  # P3/8
  - [32,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

filter:
  [[-1, Conv, [32, 6, 2, 2]],  # 0-P1/2
   [-1, Conv, [32, 64, 3, 2]],  # 1-P2/4
   [-1, C3, [64, 64, 3]],
   [-1, Conv, [64, 128, 3, 2]],  # 3-P3/8
   [-1, C3, [128, 128, 6]],
   [-1, Conv, [128, 256, 3, 2]],  # 5-P4/16
   [-1, C3, [256, 256, 9]],
   [-1, Conv, [256, 512, 3, 2]], # 7-P5/32
  [-1, Classify, [512, 1]]  # 8
  ] # 10
backbone:
  [[input, Conv, [32, 6, 2, 2]],  # 9-P1/2
   [-1, Conv, [32, 64, 3, 2]],  # 10-P2/4
   [-1, C3, [64, 64, 3]],
   [-1, Conv, [64, 128, 3, 2]],  # 12-P3/8
   [-1, C3, [128, 128, 6]],
   [-1, Conv, [128, 256, 3, 2]],  # 14-P4/16
   [-1, C3, [256, 256, 9]],
   [-1, Conv, [256, 512, 3, 2]], # 16-P5/32
   [[-1, 7], Concat, [1]], #17
   [-1, C3, [1024, 1024, 3]], #18
   [-1, SPPF, [1024, 1024, 5]],  # 19
  ]

neck:
  [[-1, Conv, [1024, 1024, 1, 1]],
   [-1, C3, [1024, 1024, 3, False]],  # 21 (P5/32-big)

   [-1, Conv, [1024, 512, 1, 1]],
   [-1, nn.Upsample,  [None, 2, 'nearest']],
   [[-1, 15, 6], Concat,  [1]],  # 24 cat backbone P4/16-medium
   [-1, C3, [1024, 512, 3,  False]], #25

   [-1, Conv, [512, 256, 1, 1]],
   [-1, nn.Upsample,  [None, 2, 'nearest']],
   [[-1, 13, 4], Concat,  [1]],  # cat head P5
   [-1, C3, [512, 256, 3, False]],  # 29 (P3/8-small)
  ]
head:
  [
    #[[17, 20, 23], Classify, [1024, 2]],  # Detect(P3, P4, P5)
    [[29, 25, 21], Detect, [[256, 512, 1024], nc, anchors]], # Detect(P3, P4, P5)
  ]

