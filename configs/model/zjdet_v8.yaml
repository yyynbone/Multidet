# modified from zjdet_small.yaml, substract the FLOPs of backbone(half channel) and neck layers.
# from              n     params                 module                    arguments
#  0                -1       608  models.layers.common_layer.Conv         [1, 16, 6, 2, 2]
#  1                -1      4672  models.layers.common_layer.Conv         [16, 32, 3, 2]
#  2                -1      4800  models.layers.yolo_layer.C2f             [32, 32, 1]
#  3                -1     18560  models.layers.common_layer.Conv         [32, 64, 3, 2]
#  4                -1     29184  models.layers.yolo_layer.C2f             [64, 64, 2]
#  5                -1     73984  models.layers.common_layer.Conv         [64, 128, 3, 2]
#  6                -1    156928  models.layers.yolo_layer.C2f             [128, 128, 3]
#  7                -1    295424  models.layers.common_layer.Conv         [128, 256, 3, 2]
#  8                -1    296448  models.layers.yolo_layer.C2f             [256, 256, 1]
#  9                -1    164608  models.layers.yolo_layer.SPPF           [256, 256, 5]
# 10                -1     66048  models.layers.common_layer.Conv         [256, 256, 1, 1]
# 11                -1    296448  models.layers.yolo_layer.C2f             [256, 256, 1, False]
# 12                -1     33024  models.layers.common_layer.Conv         [256, 128, 1, 1]
# 13                -1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
# 14           [-1, 6]         0  models.layers.common_layer.Concat       [1]
# 15                -1     90880  models.layers.yolo_layer.C2f             [256, 128, 1, False]
# 16                -1      8320  models.layers.common_layer.Conv         [128, 64, 1, 1]
# 17                -1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
# 18           [-1, 4]         0  models.layers.common_layer.Concat       [1]
# 19                -1     22912  models.layers.yolo_layer.C2f             [128, 64, 1, False]
# 20      [19, 15, 11]      8118  models.head.Detect                      [[64, 128, 256], 1, [[8, 15, 18, 30, 25, 15], [32, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]]]
#Model Summary: 241layers, 1570966 parameters, 1570966 gradients,image size is (640, 640), 3.6 GFLOPs in cpu
# time (ms)     GFLOPs     params                                    module                       input_size
#     37.31     0.5243        608  models.layers.common_layer.Conv           torch.Size([16, 1, 320, 320])
#     29.36     0.9699       4672  models.layers.common_layer.Conv           torch.Size([16, 16, 160, 160])
#     72.18     1.0224       4800  models.layers.yolo_layer.C2f               torch.Size([16, 32, 80, 80])
#     12.56     0.9568      18560  models.layers.common_layer.Conv           torch.Size([16, 32, 80, 80])
#     44.83     1.5204      29184  models.layers.yolo_layer.C2f               torch.Size([16, 64, 40, 40])
#      6.33     0.9503      73984  models.layers.common_layer.Conv           torch.Size([16, 64, 40, 40])
#     30.03     2.0251     156928  models.layers.yolo_layer.C2f               torch.Size([16, 128, 20, 20])
#      4.65     0.9470     295424  models.layers.common_layer.Conv           torch.Size([16, 128, 20, 20])
#      7.44     0.9535     296448  models.layers.yolo_layer.C2f               torch.Size([16, 256, 10, 10])
#     10.38     0.5292     164608  models.layers.yolo_layer.SPPF             torch.Size([16, 256, 10, 10])
#      2.64     0.2130      66048  models.layers.common_layer.Conv           torch.Size([16, 256, 10, 10])
#      8.40     0.9535     296448  models.layers.yolo_layer.C2f               torch.Size([16, 256, 10, 10])
#      0.98     0.1065      33024  models.layers.common_layer.Conv           torch.Size([16, 256, 10, 10])
#      0.61     0.0016          0  torch.nn.modules.upsampling.Upsample      torch.Size([16, 128, 10, 10])
#      1.16     0.0000          0  models.layers.common_layer.Concat         [torch.Size([16, 128, 20, 20]), torch.Size([16, 128, 20, 20])]
#     20.59     1.1731      90880  models.layers.yolo_layer.C2f               torch.Size([16, 256, 20, 20])
#      2.68     0.1081       8320  models.layers.common_layer.Conv           torch.Size([16, 128, 20, 20])
#      1.16     0.0033          0  torch.nn.modules.upsampling.Upsample      torch.Size([16, 64, 20, 20])
#      3.09     0.0000          0  models.layers.common_layer.Concat         [torch.Size([16, 64, 40, 40]), torch.Size([16, 64, 40, 40])]
#     41.33     1.1928      22912  models.layers.yolo_layer.C2f               torch.Size([16, 128, 40, 40])
#      6.07     0.1032       8118  models.head.Detect                        [torch.Size([16, 64, 40, 40]), torch.Size([16, 128, 20, 20]), torch.Size([16, 256, 10, 10])]
#    343.75    14.2541    1570966  Total use cpu
#     21.48     0.8909    1570966  Per image use cpu
# Parameters
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.5  # layer channel multiple
depth_layer: [C2f]
width_layer: [Conv, C2f, SPPF, Detect]
anchors:
#  - [8,15, 18,30, 25,15]  # P3/8
#  - [32,61, 62,45, 59,119]  # P4/16
#  - [116,90, 156,198, 373,326]  # P5/32
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32
# [from,  module, args], args=[ch_in , ch_out, etc]
backbone:
  [[-1, Conv, [32, 6, 2, 2]],  # 0-P1/2
   [-1, Conv, [32, 64, 3, 2]],  # 1-P2/4
   [-1, C2f, [64, 64, 3]],
   [-1, Conv, [64, 128, 3, 2]],  # 3-P3/8
   [-1, C2f, [128, 128, 6]],
   [-1, Conv, [128, 256, 3, 2]],  # 5-P4/16
   [-1, C2f, [256, 256, 9]],
   [-1, Conv, [256, 512, 3, 2]], # 7-P5/32
   [-1, C2f, [512, 512, 3]],
   [-1, SPPF, [512, 512, 5]],  # 9
  ]

neck:
  [[-1, Conv, [512, 512, 1, 1]],
   [-1, C2f, [512, 512, 3, False]],  # 11 (P5/32-big)

   [-1, Conv, [512, 256, 1, 1]],
   [-1, nn.Upsample,  [None, 2, 'nearest']],
   [[-1, 6], Concat,  [1]],  # cat backbone P4/16-medium
   [-1, C2f, [512, 256, 3,  False]], #15

   [-1, Conv, [256, 128, 1, 1]],
   [-1, nn.Upsample,  [None, 2, 'nearest']],
   [[-1, 4], Concat,  [1]],  # cat head P5
   [-1, C2f, [256, 128, 3, False]],  # 19 (P3/8-small)
  ]

head:
  [[[19, 15, 11], Detect, [[128, 256, 512], nc, anchors]], # Detect(P3, P4, P5)
  ]

